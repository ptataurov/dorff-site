@mixin less-sm {
  @media (max-width: $sm) {
    @content;
  }
}

@mixin less-md {
  @media (max-width: $md) {
    @content;
  }
}

@mixin less-lg {
  @media (max-width: $lg) {
    @content;
  }
}

@mixin less-xl {
  @media (max-width: $xl) {
    @content;
  }
}

@mixin import-font($name, $weight) {
  @font-face {
    font-weight: $weight;
    font-family: $name;
    font-display: swap;
    font-style: normal;
    @content;
  }
}

@mixin wrap {
  max-width: 1280px;
  margin-right: auto;
  margin-left: auto;

  @media (max-width: 1309.98px) {
    padding-right: 15px;
    padding-left: 15px;
  }
}

@mixin img-resp {
  width: 100%;
  max-width: 100%;
  height: auto;
  max-height: 100%;
}

@mixin img-fix-container {
  display: block;
  width: auto;
  height: 100%;
  max-height: 100%;
  margin: 0 auto;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin transition($property: all, $transition: 200ms) {
  transition: $property $transition;
}

@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append(
      $unfoldedTransitions,
      unfoldTransition($transition),
      comma
    );
  }
  transition: $unfoldedTransitions;
}

@function unfoldTransition($transition) {
  // Default values
  $property: all;
  $duration: 0.2s;
  $easing: null;
  $delay: null;
  $defaultProperties: ($property, $duration, $easing, $delay);

  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i);
    } @else {
      $p: nth($defaultProperties, $i);
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}
